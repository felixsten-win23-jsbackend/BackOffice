@page "/users"
@using BackOffice.Data
@attribute [StreamRendering]
@inject HttpClient Http

<PageTitle>Users</PageTitle>

<h1>Users</h1>


@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
            @foreach (var user in users)
            {
                <div>@user.FirstName @user.LastName @user.Email</div>
                <td>
                    <NavLink href="@($"/updateuser/{user.Email}")"><span>Edit </span></NavLink>
                    <NavLink href="@($"/deleteuser/{user.Email}")"><span>Delete </span></NavLink>
                </td>
                
            }
}

@code {
    private ApplicationUser[]? users;

    protected override async Task OnInitializedAsync()
    {
        users = await Http.GetFromJsonAsync<ApplicationUser[]>("https://userprovider-jsbackend.azurewebsites.net/api/GetUsers?code=75be1wwodJCxICSe8IkT-AJkk2re3N7qbtngBxBX4wnAAzFuvFPODg%3D%3D");
    }


    public class ApplicationUser
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public object Biography { get; set; }
        public string ProfileImage { get; set; }
        public object AddressId { get; set; }
        public object Address { get; set; }
        public string Id { get; set; }
        public string UserName { get; set; }
        public string NormalizedUserName { get; set; }
        public string Email { get; set; }
        public string NormalizedEmail { get; set; }
        public bool EmailConfirmed { get; set; }
        public string PasswordHash { get; set; }
        public string SecurityStamp { get; set; }
        public string ConcurrencyStamp { get; set; }
        public object PhoneNumber { get; set; }
        public bool PhoneNumberConfirmed { get; set; }
        public bool TwoFactorEnabled { get; set; }
        public object LockoutEnd { get; set; }
        public bool LockoutEnabled { get; set; }
        public int AccessFailedCOunt { get; set; }

    }

}
