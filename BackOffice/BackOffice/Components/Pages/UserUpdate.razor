@page "/updateuser/{email}"
@using BackOffice.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Mvc
@using System.ComponentModel.DataAnnotations
@attribute [StreamRendering]

@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Update User</h3>

<EditForm Model="model" OnValidSubmit="UpdateUser" FormName="updateuser">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="firstName">First Name:</label>
        <InputText id="firstName" class="form-control" @bind-Value="model.FirstName" />
    </div>
    <div class="form-group">
        <label for="lastName">Last Name:</label>
        <InputText id="lastName" class="form-control" @bind-Value="model.LastName" />
    </div>
    <div class="form-group">
        <label for="biography">Biography:</label>
        <InputText id="biography" class="form-control" @bind-Value="model.Biography" />
    </div>
    <div class="form-group">
        <label for="phoneNumber">Phone Number:</label>
        <InputText id="phoneNumber" class="form-control" @bind-Value="model.PhoneNumber" />
    </div>
    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="model.Email" />
    </div>
    <button type="submit" class="btn btn-primary">Update</button>
</EditForm>

@code {
    [Parameter] public string Email { get; set; }

    [SupplyParameterFromForm]
    private UpdateUserModel model { get; set; } = new();



    private async Task UpdateUser()
    {
        try
        {
            var jsonString = System.Text.Json.JsonSerializer.Serialize(model);
            var content = new StringContent(jsonString, System.Text.Encoding.UTF8, "application/json");

            Console.WriteLine($"Request Payload: {jsonString}");

            var response = await Http.PutAsync($"https://userprovider-jsbackend.azurewebsites.net/api/UpdateUser?email={Email}&code=75be1wwodJCxICSe8IkT-AJkk2re3N7qbtngBxBX4wnAAzFuvFPODg%3D%3D", content);
            var responseContent = await response.Content.ReadAsStringAsync();

            Console.WriteLine($"Response Status: {response.StatusCode}");
            Console.WriteLine($"Response Content: {responseContent}");

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/users");
                // Refresh the model to reflect the updated values
                var updatedResponse = await Http.GetFromJsonAsync<UpdateUserModel>($"https://userprovider-jsbackend.azurewebsites.net/api/GetUserByEmail?email={Email}&code=75be1wwodJCxICSe8IkT-AJkk2re3N7qbtngBxBX4wnAAzFuvFPODg%3D%3D");
                if (updatedResponse != null)
                {
                    model = updatedResponse;
                    Console.WriteLine($"Updated Model: {System.Text.Json.JsonSerializer.Serialize(model)}");
                    
                    
                }


            }
            else
            {
                Console.WriteLine($"Error updating user: {response.StatusCode}, {responseContent}");
                // Optionally display the error message to the user
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating user: {ex.Message}");
        }
    }

    public class UpdateUserModel
    {
        [Required(ErrorMessage = "First Name is required")]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Last Name is required")]
        public string LastName { get; set; }

        public string Biography { get; set; }

        [Phone(ErrorMessage = "Invalid phone number format")]
        public string PhoneNumber { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; }
    }
}