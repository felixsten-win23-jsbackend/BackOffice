@page "/coursedelete/{id}"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Delete Course</h3>

<EditForm Model="model" OnValidSubmit="DeleteCourse" FormName="deletecourse">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="courseId">Enter ID of the course to Delete:</label>
        <InputText id="courseId" class="form-control" @bind-Value="model.Id" />
    </div>
    <button type="submit" class="btn btn-danger">Delete</button>
</EditForm>

@code {

    [Parameter] public string Id { get; set; }

    [SupplyParameterFromForm]
    private DeleteCourseModel model { get; set; } = new();

    private async Task DeleteCourse()
    {
        try
        {
            if (string.IsNullOrEmpty(model.Id))
            {
                Console.WriteLine("Course ID is required");
                return;
            }

            var request = new GraphQLRequest
                {
                    Query = @"
                mutation ($id: String!) {
                    deleteCourse(id: $id)
                }",
                    Variables = new { id = model.Id }
                };

            var response = await Http.PostAsJsonAsync("https://courseprovider-jsbackend.azurewebsites.net/api/graphql?", request);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Course deleted successfully");
                NavigationManager.NavigateTo("/courses");
            }
            else
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error deleting course: {response.StatusCode}, {responseContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting course: {ex.Message}");
        }
    }

    public class DeleteCourseModel
    {
        [Required(ErrorMessage = "Course ID is required")]
        public string Id { get; set; }
    }

    public class GraphQLRequest
    {
        public string Query { get; set; }
        public object Variables { get; set; }
    }
}